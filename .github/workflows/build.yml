name: Build

on:
  workflow_dispatch:

run-name: Build
  
jobs:
  rootfs:
    runs-on: ubuntu-latest
    container:
     image: ubuntu:22.04
    name: Build rootfs 
    strategy:
      matrix:
        flavor: [server]
        suite: [jammy]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update && apt-get install -y git libelf-dev dwarves \
          build-essential gcc-aarch64-linux-gnu bison \
          qemu-user-static qemu-system-arm qemu-efi-aarch64 u-boot-tools binfmt-support \
          debootstrap flex libssl-dev bc rsync kmod cpio xz-utils fakeroot parted \
          udev dosfstools uuid-runtime device-tree-compiler python3 \
          python-is-python3 fdisk bc debhelper python3-pyelftools python3-setuptools \
          python3-pkg-resources swig libfdt-dev libpython3-dev dctrl-tools python3-distutils

      - name: Add kiosk overlay files
        run: |
          mkdir -p kiosk-overlay/etc/systemd/system
          mkdir -p kiosk-overlay/home/kiosk/.config
          mkdir -p kiosk-overlay/usr/local/sbin
          mkdir -p build/rootfs_overlay

          cat <<EOF > kiosk-overlay/etc/systemd/system/kiosk.service
          [Unit]
          Description=Wayland Chromium Kiosk
          After=systemd-user-sessions.service

          [Service]
          ExecStart=/usr/bin/weston --backend=drm-backend.so --tty=1
          Restart=always
          RestartSec=1
          User=kiosk
          Environment=XDG_RUNTIME_DIR=/run/user/1000
          WorkingDirectory=/home/kiosk

          [Install]
          WantedBy=multi-user.target
          EOF

          cat <<EOF > kiosk-overlay/home/kiosk/.config/weston.ini
          [core]
          idle-time=0
          xwayland=false

          [shell]
          panel-position=none
          locking=false
          background-color=0xff000000

          [autolaunch]
          command=/usr/bin/chromium --ozone-platform=wayland \
            --enable-features=UseOzonePlatform --noerrdialogs \
            --disable-infobars --disable-session-crashed-bubble \
            --no-first-run --kiosk https://example.com
          EOF

          cat <<EOF > kiosk-overlay/usr/local/sbin/setup-kiosk.sh
          #!/bin/bash
          useradd -m -s /bin/bash kiosk || true
          mkdir -p /etc/systemd/system/multi-user.target.wants
          ln -sf /etc/systemd/system/kiosk.service /etc/systemd/system/multi-user.target.wants/kiosk.service
          chown -R kiosk:kiosk /home/kiosk
          EOF
          chmod +x kiosk-overlay/usr/local/sbin/setup-kiosk.sh

      - name: Restore rootfs build cache
        uses: actions/cache@v4
        with:
          path: ./build
          key: rootfs-${{ matrix.suite }}-${{ matrix.flavor }}-${{ hashFiles('**/build.sh') }}

      - name: Build
        run: |
          cp -a kiosk-overlay/* ./build/rootfs_overlay/
          ./build.sh --suite=${{ matrix.suite }} --flavor=${{ matrix.flavor }} --rootfs-only

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-${{ matrix.suite }}-preinstalled-${{ matrix.flavor }}-arm64-rootfs
          path: ./build/ubuntu-${{ matrix.suite }}-preinstalled-${{ matrix.flavor }}-arm64.rootfs.tar.xz

      - name: Extract rootfs
        run: |
          mkdir -p ./build/rootfs
          tar -xpf ./build/ubuntu-${{ matrix.suite }}-preinstalled-${{ matrix.flavor }}-arm64.rootfs.tar.xz -C ./build/rootfs

      - name: Run kiosk setup in chroot
        run: |
          chroot ./build/rootfs /usr/local/sbin/setup-kiosk.sh

      - name: Save rootfs cache
        uses: actions/cache/save@v4
        with:
          path: ./build
          key: rootfs-${{ matrix.suite }}-${{ matrix.flavor }}-${{ hashFiles('**/build.sh') }}



  kernel:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:22.04
    name: Build kernel
    strategy:
      matrix:
        suite: [jammy]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update && apt-get install -y git libelf-dev dwarves \
          build-essential gcc-aarch64-linux-gnu bison \
          qemu-user-static qemu-system-arm qemu-efi-aarch64 u-boot-tools binfmt-support \
          debootstrap flex libssl-dev bc rsync kmod cpio xz-utils fakeroot parted \
          udev dosfstools uuid-runtime device-tree-compiler python3 \
          python-is-python3 fdisk bc debhelper python3-pyelftools python3-setuptools \
          python3-pkg-resources swig libfdt-dev libpython3-dev dctrl-tools python3-distutils

      - name: Restore kernel build cache
        uses: actions/cache@v4
        with:
          path: ./build
          key: kernel-${{ matrix.suite }}-${{ hashFiles('**/build.sh') }}

      - name: Build
        run: ./build.sh --suite=${{ matrix.suite }} --kernel-only

      - name: Save kernel build cache
        uses: actions/cache/save@v4
        with:
          path: ./build
          key: kernel-${{ matrix.suite }}-${{ hashFiles('**/build.sh') }}

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: linux-rockchip-${{ matrix.suite }}
          path: ./build/linux-*.deb

  build:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:22.04
    needs: [rootfs, kernel]
    name: Build image
    strategy:
      matrix:
        board: [rock-5c]
        flavor: [server]
        suite: [jammy]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update && apt-get install -y git build-essential gcc-aarch64-linux-gnu bison \
          qemu-user-static qemu-system-arm qemu-efi u-boot-tools binfmt-support \
          debootstrap flex libssl-dev bc rsync kmod cpio xz-utils fakeroot parted \
          udev dosfstools uuid-runtime device-tree-compiler python3 \
          python-is-python3 fdisk bc debhelper python3-pyelftools python3-setuptools \
          python3-distutils python3-pkg-resources swig libfdt-dev libpython3-dev dctrl-tools

      - name: Download rootfs
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-${{ matrix.suite }}-preinstalled-${{ matrix.flavor }}-arm64-rootfs
          path: ./build/

      - name: Download kernel
        uses: actions/download-artifact@v4
        with:
          name: linux-rockchip-${{ matrix.suite }}
          path: ./build/

      - name: Build
        run: ./build.sh --board=${{ matrix.board }} --suite=${{ matrix.suite }} --flavor=${{ matrix.flavor }}

      - name: Upload image
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-${{ matrix.suite }}-preinstalled-${{ matrix.flavor }}-arm64-${{ matrix.board }}
          path: ./images/ubuntu-*-preinstalled-${{ matrix.flavor }}-arm64-${{ matrix.board }}.*
